using ProjectXYZAPI.Model;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using static ProjectXYZAPI.FunctionHelper;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace ProjectXYZAPI.Repository
{
    public class Repo
    {
        string conString;
        private readonly SqlDBHelper sql;
        private IConfiguration _config;
        private SqlConnection conn;
        private SqlTransaction trans;

        static string GetActualAsyncMethodName([CallerMemberName]string name = null) => name;

        public Repo(IConfiguration config)
        {
            sql = new SqlDBHelper();
            _config = config;
        }

        public string connstring(string db)
        {
            return conString = Startup.ConnectionStringBuild(db);
        }

        private void ConnSql(string db)
        {
            try
            {
                string conns = connstring(db);

                if (conn == null)
                    conn = new SqlConnection(conns);
                if (conn.State != ConnectionState.Open)
                    conn.Open();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public dynamic getListCompany(string db)
        {
            DataTable dt = new DataTable();
            List<Company> listResults = new List<Company>();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GetListCompany", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);

                listResults = FunctionHelper.ConvertDataTable<Company>(dt);
            }
            catch (Exception ex)
            {
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = db,
                    msg = ex.Message                    
                };
                Insert_Request_Logs(log);

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return listResults;
        }

        public dynamic isLoginValidOrNot(isLogin param)
        {
            dynamic result;
            string token = string.Empty;
            string val = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(param.INTERCOMPANY)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_IsValidLoginOrNot";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add(new SqlParameter("@userId", param.USER));
                        cmd.Parameters.Add(new SqlParameter("@password", param.PASSWORD));
                        cmd.Parameters.Add("@isSuccess", SqlDbType.Bit);
                        cmd.Parameters["@isSuccess"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        bool retval = Convert.ToBoolean(cmd.Parameters["@isSuccess"].Value);
                        if (retval == true)
                        {
                            token = GenerateJWT(param);
                            result = new
                            {
                                code = (int)HttpStatusCode.OK,
                                message = token
                            };
                        }
                        else
                        {
                            string msg = string.Empty;
                            int codes;
                            is_User_Validation(param);
                            val = is_User_Validation_Change(param);

                            if (Convert.ToInt32(val) >= 3)
                            {
                                codes = 103;
                                msg = "Your account is locked, please contact the Administrator";
                            }
                            else
                            {
                                codes = 403;
                                msg = "Invalid UserName or Password";
                            }

                            result = new
                            {
                                code = codes,
                                message = msg
                            };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return result;

        }

        public dynamic isLoginSession(isLogin param)
        {
            dynamic result;
            string token = string.Empty;
            string val = string.Empty;
            string msg = string.Empty;
            int codes;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(param.INTERCOMPANY)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_IsLoginSession";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add(new SqlParameter("@userId", param.USER));
                        cmd.Parameters.Add(new SqlParameter("@session", param.SessionID));
                        cmd.Parameters.Add(new SqlParameter("@dateLogin", DateTime.Now));
                        cmd.Parameters.Add(new SqlParameter("@interid", param.INTERCOMPANY));
                        cmd.Parameters.Add(new SqlParameter("@company", param.COMPANY_NAME ?? ""));
                        cmd.Parameters.Add("@isSuccess", SqlDbType.Bit);
                        cmd.Parameters["@isSuccess"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        bool retval = Convert.ToBoolean(cmd.Parameters["@isSuccess"].Value);
                        if (retval == true)
                        {
                            result = new
                            {
                                code = "200",
                                message = ""
                            };
                        }
                        else
                        {
                            result = new
                            {
                                code = "999",
                                message = "Your account is already logged in, please try again later"
                            };
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return result;

        }

        public string is_User_Validation(isLogin param)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(param.INTERCOMPANY)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "BCAF_User_Validation";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add(new SqlParameter("@USERID", param.USER));
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                retval = ex.Message.ToString();
                return retval;
            }

            return retval;

        }

        public string is_User_Validation_Change(isLogin param)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(param.INTERCOMPANY)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "BCAF_User_Validation_Change";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add(new SqlParameter("@USERID", param.USER));
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                retval = ex.Message.ToString();
                return retval;
            }

            return retval;

        }

        public string is_User_Unlocked(isLogin param)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(param.INTERCOMPANY)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "BCAF_User_Unlocked";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add(new SqlParameter("@USERID", param.USER));
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                retval = ex.Message.ToString();
                return retval;
            }

            return retval;

        }

        private string GenerateJWT(isLogin param)
        {
            try
            {
                var security = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["JwtConfig:Key"]));
                var credential = new SigningCredentials(security, SecurityAlgorithms.HmacSha256);

                var claim = new[]
                {
                    new Claim(JwtRegisteredClaimNames.Sub,param.USER),
                    new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString())
                };

                var token = new JwtSecurityToken(
                    issuer: _config["JwtConfig:Issuer"],
                    audience: _config["JwtConfig:Issuer"],
                    claim,
                    expires: DateTime.Now.AddMinutes(120),
                    signingCredentials: credential);

                var entoken = new JwtSecurityTokenHandler().WriteToken(token);
                return entoken;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #region Lookup
        public DataSet GetLookupGSR(mLookupParam2 param, string db, string user)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_GSRNumber_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;

                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                //cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                //cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                //cmd.Parameters.AddWithValue("@mode", param.mode);
                //cmd.Parameters.AddWithValue("@page", param.page);
                //cmd.Parameters.AddWithValue("@size", param.size);
                //cmd.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }

        public DataSet GetLookupTransactionID(mLookupParam param, string db)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_GetTransactionIDGSR_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }

        public DataSet GetLookupSiteByUser(mLookupParam param, string db, string user)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_SiteID_By_UserID_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }
        
        public DataSet GetLookupSite(mLookupParam param, string db, string user)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_SiteID_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }

        public DataSet GetLookupFrerNumber(mLookupParam param, string db, string user)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_Link_FRER_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }

        public DataTable GetLookupBrancID(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_BranchID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupUser(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_UserID_2", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@Branch", param.param1 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupItembyTransaction(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_ItemNbrByTransactionID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@transactionID", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@siteID", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@Currency", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupUofmByItem(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_GetUOMByItemNbr", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@classUOM", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@SiteID", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@itemNbr", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@Currency", param.param4 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupBank(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_DealerBankID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupCurrency(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_CurrencyID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@itemNbr", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@UOFM", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@siteID", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupITE_RefNo(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_ITE_GSRNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@user", user);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupITE_DocNbr(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_ITEDocNbr", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@user", user);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupItemNbrBySiteID(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_ItemNbrBySiteID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@siteID", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataSet GetLookupItemTransferNumber(mLookupParam param, string db, string user)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_GetItemTransferEntryRefNo_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;

                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }

        public DataTable getLookupItemTransferDocumenNumber(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_ItemTransferDocumentNbr", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@user", param.param1 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getLookupItemNumber(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_ItemNbr", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getLookupFREREntertainNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FREREntertainNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getLookupEntertainID(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_EntertainID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getLookupFRERPerjalananDinasNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERPerjalananDinasNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupFRERKotaTujuan(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_KotaTujuan", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupFRERKeperluanDinas(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_KeperluanDinasID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupTravelExpense(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_TravelExpense", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupTravelExpense2(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_TravelExpense2", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@user", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@kota", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@currency", param.param3 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getLookupFRERPromotionNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERPromotionNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public DataTable GetLookupTransactionID_Promotion(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_TransactionID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@transactionType", param.param1 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataSet GetLookupLinkGSRNumber(mLookupParam param, string db, string user)
        {
            DataSet ds = new DataSet();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_Link_GSR_New", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@search", param.search ?? "");
                cmd.Parameters.AddWithValue("@length", param.length);
                cmd.Parameters.AddWithValue("@from", param.from);
                cmd.Parameters.AddWithValue("@ordercol", param.orderCol);
                cmd.Parameters.AddWithValue("@ordertype", param.orderType);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(ds);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return ds;
        }
        
        public DataTable GetLookupPromotionExpense(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_PromotionExpense", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public DataTable GetLookupDivisionID(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_DivisionID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public DataTable GetLookupPPH(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_PPH", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public DataTable GetLookupVendorID(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_VendorID", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public DataTable getlookupFRERBiayaUmumNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERBiayaUmumNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupFRERCategoryTrxBU(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_CategoryTransactionIDBU", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupTransactionID_BiayaUmum2(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_TransactionID2", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@CategoryTrxID", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@transactionType", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@VendorID", param.param3 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getlookupFRERBiayaUmumFinanceNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERBiayaUmumFinanceNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable getLookupFRERPettycashNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERPettycashNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@searchApproval", param.searchApproval ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public DataTable GetLookupFRERNumberByFRERType(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERNumberByFRERType", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@FRERType", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupFRERSettlementNumber(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERSettlementNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@TypeEntertainment", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@TypePerjalananDinas", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@TypePromotion", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@TypeBiayaUmum", param.param4 ?? "");
                cmd.Parameters.AddWithValue("@TypeBiayaUmumFinance", param.param5 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupFRERInquiry(LookupParam param, string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_FRERInquiry", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@FRERType", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Save", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@Submit", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@Approve", param.param4 ?? "");
                cmd.Parameters.AddWithValue("@F_Approved", param.param5 ?? "");
                cmd.Parameters.AddWithValue("@Rejected", param.param6 ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetLookupPPN(LookupParam param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Lookup_PPN", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@pFilter", param.pFilter ?? "");
                cmd.Parameters.AddWithValue("@mode", param.mode);
                cmd.Parameters.AddWithValue("@page", param.page);
                cmd.Parameters.AddWithValue("@size", param.size);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        #endregion

        #region GSR
        public DataTable GetDataGSR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSR_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@GSRNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = trx,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataGSRDetail(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSR_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@GSRNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = trx,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetGSRUserDefaultSite(string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSR_UserDefaultSite", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = "",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetGSRUserSetup(string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSR_User_Setup", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = "",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDefaultCurrencyRate(string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GetDefaultCurrencyRate", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = "",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetCurrencyRate(string curr, DateTime dtime, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GetCurrencyRate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@curr", curr ?? "");
                cmd.Parameters.AddWithValue("@date", dtime.ToString("yyyy-MM-dd"));

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = curr + ", dtime: " + dtime,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string GetGSRNewNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        //cmd.Transaction = tran;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_GSRNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }

                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = "",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;
        }

        public string GSRSaveHeader(mGSREntry model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    //using (SqlTransaction tran = con.BeginTransaction())
                    //{
                    //    try
                    //    {
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        //cmd.Transaction = tran;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_GSR_SaveHeader";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                        cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                        cmd.Parameters.AddWithValue("@ReqDate", model.ReqDate);
                        cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID ?? "");
                        cmd.Parameters.AddWithValue("@Location", model.Location ?? "");
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID ?? "");
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                        cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                        cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                        cmd.Parameters.AddWithValue("@Amount", model.Amount);
                        cmd.Parameters.AddWithValue("@UserID", user);
                        cmd.ExecuteNonQuery();

                    }
                    //}
                    //catch (Exception ex)
                    //{
                    //    tran.Rollback();
                    //    throw ex;
                    //}

                    //}
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string GSRSaveDetail(mGSREntry_Detail model, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_GSR_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                        cmd.Parameters.AddWithValue("@Chk", model.Chk);
                        cmd.Parameters.AddWithValue("@ItemNumber", model.ItemNumber);
                        cmd.Parameters.AddWithValue("@Qty", model.Qty);
                        cmd.Parameters.AddWithValue("@QtyPR", model.QtyPR);
                        cmd.Parameters.AddWithValue("@QtyInv", model.QtyInv);
                        cmd.Parameters.AddWithValue("@QtyFA", model.QtyFA);
                        cmd.Parameters.AddWithValue("@ReqDate", model.ReqDate);
                        cmd.Parameters.AddWithValue("@UOFM", model.UOFM ?? "");
                        cmd.Parameters.AddWithValue("@QtyCanceled", model.QtyCanceled);
                        cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                        cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID);
                        cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingUnitPrice", model.OriginatingUnitPrice);
                        cmd.Parameters.AddWithValue("@FunctionalUnitPrice", model.FunctionalUnitPrice);
                        cmd.Parameters.AddWithValue("@OriginatingTotalPrice", model.OriginatingTotalPrice);
                        cmd.Parameters.AddWithValue("@FunctionalTotalPrice", model.FunctionalTotalPrice);
                        cmd.Parameters.AddWithValue("@ExchangeRate", model.ExchangeRate);
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@QtyAvailable", model.QtyAvailable);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string GSRDelete(mGSREntry model, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_GSR_Delete", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", model.UserID ?? "");
                cmd.ExecuteNonQuery();

                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string GSRUpdate(mGSREntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_GSR_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");
                cmd.ExecuteNonQuery();

                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string GSRPost(mGSREntry model, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_GSR_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", model.UserID ?? "");
                cmd.ExecuteNonQuery();

                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }


            return retval;

        }

        public string BCAF_Get_Creator_UserID_GSR(string db, string GSRNumber)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_BCAF_Get_Creator_UserID_GSR";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@GSRNumber", GSRNumber ?? "");
                        cmd.Parameters.Add("@UserID", SqlDbType.VarChar, 100);
                        cmd.Parameters["@UserID"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@UserID"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = "GSRNumber: "+ GSRNumber,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string BCAF_Get_UserName(string db, string user)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_BCAF_Get_UserName";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@userId", user ?? "");
                        cmd.Parameters.Add("@userName", SqlDbType.VarChar, 100);
                        cmd.Parameters["@userName"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@userName"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = "",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetUserEmailData(string db, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ER_Get_User_Email", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string SendMail(string db, string sFrom, string sTo, string sCC, string sSubject, string sBody, string sSMTPIP)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "sp_send_dbmail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@profile_name", sFrom ?? "");
                        cmd.Parameters.AddWithValue("@recipients", sTo ?? "");
                        cmd.Parameters.AddWithValue("@body", sBody ?? "");
                        cmd.Parameters.AddWithValue("@subject", sSubject ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"from : {sFrom}, to: {sTo}, scc: {sCC}, subject: {sSubject}, body: {sBody}, smtpip: {sSMTPIP}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string SaveSendMailWEBHist(string db, string Document, string FromUser, string ToUser, string EmailToUser, DateTime Date,
            string Subject, string Content)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_ER_InsertSendMailHist";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DocNum", Document ?? "");
                        cmd.Parameters.AddWithValue("@FromUser", FromUser ?? "");
                        cmd.Parameters.AddWithValue("@ToUser", ToUser ?? "");
                        cmd.Parameters.AddWithValue("@ToEmail", EmailToUser ?? "");
                        cmd.Parameters.AddWithValue("@Date", Date.ToString("yyyy-MM-dd"));
                        cmd.Parameters.AddWithValue("@SubjectMail", Subject ?? "");
                        cmd.Parameters.AddWithValue("@ContentMail", Content ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"doc: {Document}, from : {FromUser}, to: {ToUser}, email: {EmailToUser}, date: {Date}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }
        #endregion

        #region GSR_Item
        public DataTable GetDataGSRItem_Hbydoc(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ITE_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ITENumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx : {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataGSRItem_Dbydoc(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ITE_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ITENumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx : {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string getITENewNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_ITENumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string ITESaveHeader(mGSRItemTransaction model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_ITE_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@ITENumber", model.ITENumber ?? "");
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@Descr", model.Descr ?? "");
                cmd.Parameters.AddWithValue("@docType", model.docType);
                cmd.Parameters.AddWithValue("@refNo", model.refNo ?? "");
                cmd.Parameters.AddWithValue("@siteID", model.siteID);
                cmd.Parameters.AddWithValue("@user", user);

                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_GSR_User_Setup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            string qty = Convert.ToString(i.TRXQTY);
                            if (model.docType == "1")
                            {
                                qty = "-" + qty;
                                i.TRXQTY = qty;
                            }

                            SqlCommand cmddetail = new SqlCommand("spAI_ITE_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@ITENumber", model.ITENumber ?? "");
                            cmddetail.Parameters.AddWithValue("@ItemNbr", i.ItemNbr);
                            cmddetail.Parameters.AddWithValue("@UOFM", i.UOFM);
                            cmddetail.Parameters.AddWithValue("@TRXQTY", i.TRXQTY);
                            cmddetail.Parameters.AddWithValue("@Descr", i.Descr);
                            cmddetail.Parameters.AddWithValue("@UnitCost", i.UnitCost);
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string ITESaveDetail(mGSRItemTransaction_Detail model, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_ITE_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@ITENumber", model.ITENumber ?? "");
                        cmd.Parameters.AddWithValue("@ItemNbr", model.ItemNbr);
                        cmd.Parameters.AddWithValue("@UOFM", model.UOFM);
                        cmd.Parameters.AddWithValue("@TRXQTY", model.TRXQTY);
                        cmd.Parameters.AddWithValue("@Descr", model.Descr);
                        cmd.Parameters.AddWithValue("@UnitCost", model.UnitCost);
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string DeleteITE(mGSRItemTransaction model, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_Delete_ITE";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@ITENumber", model.ITENumber ?? "");
                        cmd.Parameters.AddWithValue("@UserID", model.UserID ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string Posting_ITE(mGSRItemTransaction model, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_Posting_ITE", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@ITENumber", model.ITENumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", model.UserID ?? "");
                cmd.ExecuteNonQuery();

                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        #endregion

        #region GSR_Item_Transfer
        public DataTable GetItemTransferEntryHeaderByRefNbr(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSRTransferHeader_By_RefNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@refNum", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetItemTransferEntryDetailByRefNbr(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSRTransferDetail_By_RefNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@refNum", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetItemTransferEntryHeaderByDocNbr(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSRTransferHeader_By_DocNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@docNum", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetItemTransferEntryDetailByDocNbr(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_GSRTransferDetail_By_DocNumber", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@docNum", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string GetGSRTransferNewNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_ItemTransferEntryDocumentNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string ItemTransferSave(mGSRItemTransfer model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_Save_ItemTransfer", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@DocNbr", model.DocNbr ?? "");
                cmd.Parameters.AddWithValue("@RefNbr", model.RefNbr);
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@FromSiteID", model.FromSiteID);
                cmd.Parameters.AddWithValue("@ToSiteID", model.ToSiteID);
                cmd.Parameters.AddWithValue("@UserID", user);
                cmd.ExecuteNonQuery();

                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string DeleteItemTransfer(mGSRItemTransfer model, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_Delete_ItemTransfer", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@docNbr", model.DocNbr ?? "");
                cmd.Parameters.AddWithValue("@UserID", model.UserID);
                cmd.Parameters.Add("@errorMsg", SqlDbType.VarChar, 50);
                cmd.Parameters["@errorMsg"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();

                if (!string.IsNullOrEmpty(cmd.Parameters["@errorMsg"].Value.ToString()))
                {
                    retval = (string)cmd.Parameters["@errorMsg"].Value;
                }

                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string PostingItemTransfer(mGSRItemTransfer model, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_Posting_ItemTransfer", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@docNbr", model.DocNbr ?? "");
                cmd.Parameters.AddWithValue("@UserID", model.UserID);
                cmd.ExecuteNonQuery();

                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }


            return retval;

        }
        #endregion

        #region GSR_Item_Stock
        public DataTable GetListQuantityInquiry(mGSRItemStockInquiry param, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Quantity_Inquiry", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ItemNumber", param.ItemNbr ?? "");
                cmd.Parameters.AddWithValue("@SiteID", param.SiteID ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string getDataItemNumber(string trx, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_getBaseUOFMDescription";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@itemNumber", trx ?? "");
                        cmd.Parameters.Add("@result", SqlDbType.VarChar, 50);
                        cmd.Parameters["@result"].Direction = ParameterDirection.Output;
                        cmd.Parameters.Add("@description", SqlDbType.VarChar, 50);
                        cmd.Parameters["@description"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@result"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG

                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable GetListItemStockInquiry(string ItemNbr, string SiteID, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Item_Stock_Inquiry", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@itemNumber", ItemNbr ?? "");
                cmd.Parameters.AddWithValue("@siteID", SiteID ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"itemnumber: {ItemNbr}, siteid: {SiteID}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        #endregion

        #region Setup
        public int ChangePassword_Validation_OLDPassword(string pass, string user, string db)
        {
            int retval = 0;

            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "BCAF_User_Validation_Old_Password";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@USERID", user ?? "");
                        cmd.Parameters.AddWithValue("@OLDPASSWORD", pass ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToInt32(cmd.Parameters["@output"].Value);

                    }
                }

                return retval;
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"pass: {pass}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }           

        }

        public int ChangePassword_Validation(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_Get_ChangePassword_Validation";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToInt32(cmd.Parameters["@output"].Value);

                    }
                }

                return retval;
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
        }

        public string ChangePasswordSave(mChangePassword model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_ChangePassword_Save";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.Parameters.AddWithValue("@Password", model.NewPassword);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }
        #endregion

        #region FRER Entertaint
        public string GetTransactionEntertain(string company, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRER_GetTransactionEntertain";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@company", company ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"company: {company}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable GetUserData(string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRER_UserData", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetVendorData(string vendorid, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRER_GetMaster_Vendor", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@VendorID", vendorid ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"vendorid: {vendorid}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFREREntertainHDR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFREREntertainDetail(string trx, string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_RetrieveDetailExtended", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FREREntertainDeleteTempDetail(string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertain_DeleteTempDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public int FRER_Cek_User_Tree_FinalAproval(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Tree_FinalAproval";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public int FRER_Cek_User_Tree_Aproval(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Tree_Aproval";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public int FRER_Cek_SetupExtention(string exten, int type, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_SetupExtention";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@type", type);
                        cmd.Parameters.AddWithValue("@exten", exten ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"exten: {exten}, type: {type}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string FRER_Cek_Setupfile_size(string size, int type, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_Setupfile_size";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@type", type);
                        cmd.Parameters.AddWithValue("@size", size ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 8000);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (string)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"size: {size}, type: {type}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable GetUserSetup(string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRER_UserSetup", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FREREntertainDelete(mFREREntertainEntry model, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertain_Delete";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@UserID", model.UserID ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string GetNewFREREntertainNumber(string db, string user)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FREREntertainNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@user", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                //throw ex;
                throw ex;
            }
            return retval;

        }

        public string FREREntertainSaveHeader(mFREREntertainEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@FRERAdvance", model.FRERAdvance);
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@DueDate", model.DueDate);
                cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                cmd.Parameters.AddWithValue("@BranchDescription", model.BranchDescription ?? "");
                cmd.Parameters.AddWithValue("@DivisionDescription", model.DivisionDescription ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@EntertainTypeID", model.EntertainTypeID ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Requester", model.Requester);
                cmd.Parameters.AddWithValue("@NIP", model.NIP ?? "");
                cmd.Parameters.AddWithValue("@EntertainPlace", model.EntertainPlace ?? "");
                cmd.Parameters.AddWithValue("@EntertainDate", model.EntertainDate ?? "1900-01-01 00:00:00");
                cmd.Parameters.AddWithValue("@EntertainPerson", model.EntertainPerson ?? "");
                cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount);
                cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", model.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERAmount", model.OriginalFRERAmount ?? "0");
                cmd.Parameters.AddWithValue("@PaymentMethod", model.PaymentMethod);
                cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                cmd.Parameters.AddWithValue("@NoRekening", model.NoRekening ?? "");
                cmd.Parameters.AddWithValue("@AtasNama", model.AtasNama ?? "");
                cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID);
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@EntertainPurpose", model.EntertainPurpose ?? "");
                cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining ?? "0");

                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    FREREntertainClearTempExtendedBeforeInsert(db, model.FRERNumber, conn, trans);

                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FREREntertain_SaveDetail_Extended", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@NoUrut", i.NoUrut);
                            cmddetail.Parameters.AddWithValue("@EntertainPlace", i.EntertainPlace);
                            cmddetail.Parameters.AddWithValue("@EntertainAlamat", i.EntertainAlamat ?? "");
                            cmddetail.Parameters.AddWithValue("@EntertainDate", i.EntertainDate);
                            cmddetail.Parameters.AddWithValue("@EntertainPerson", i.EntertainPerson);
                            cmddetail.Parameters.AddWithValue("@EntertainTypeID", i.EntertainTypeID);
                            cmddetail.Parameters.AddWithValue("@Amount", i.Amount);
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount);
                            cmddetail.Parameters.AddWithValue("@EntertainPurpose", i.EntertainPurpose ?? "");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@UserID", user ?? "");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();

                //if (retval == null)
                //{
                //    FREREntertainClearTempExtendedBeforeInsert(db, model.FRERNumber);
                //}
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FREREntertainSaveDetail(mFREREntertainEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertain_SaveDetail_Extended";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@NoUrut", model.NoUrut);
                        cmd.Parameters.AddWithValue("@EntertainPlace", model.EntertainPlace);
                        cmd.Parameters.AddWithValue("@EntertainAlamat", model.EntertainAlamat ?? "");
                        cmd.Parameters.AddWithValue("@EntertainDate", model.EntertainDate);
                        cmd.Parameters.AddWithValue("@EntertainPerson", model.EntertainPerson);
                        cmd.Parameters.AddWithValue("@EntertainTypeID", model.EntertainTypeID);
                        cmd.Parameters.AddWithValue("@Amount", model.Amount);
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount);
                        cmd.Parameters.AddWithValue("@EntertainPurpose", model.EntertainPurpose ?? "");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetDataFREREntertainPerson(mFREREntertainEntry_Person model, string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_RetrieveDetailTemp", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@Ord", model.LineNumber ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FREREntertainSavePerson(mFREREntertainEntry_Person model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_SaveDetailTemp", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@Name", model.Name);
                cmd.Parameters.AddWithValue("@Company", model.Company);
                cmd.Parameters.AddWithValue("@Description", model.Jabatan ?? "");
                cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                cmd.Parameters.AddWithValue("@Ord", model.Ord);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.ExecuteNonQuery();

                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FREREntertainClearTempDetailBeforeInsert(mFREREntertainEntry_Person model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertain_DeleteTempDetail_BeforeInsert";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@Ord", model.LineNumber ?? "");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public int FRER_Cek_User_Settlement_Entertainment(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Settlement_Entertainment";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public int Check_Is_Settlement(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Settlement";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable FRERCekDetailTemp(string trx, string db, string line, string user)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_CekDetailTemp", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@LineNumber", line ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}, line: {line}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FREREntertainClearTempExtendedBeforeInsert(string db, string trx, SqlConnection con, SqlTransaction trans)
        {
            string retval = string.Empty;
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_DeleteTempExtended_BeforeInsert", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FREREntertainUpdate(mFREREntertainEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", param.ApprovalStatus ?? "");
                cmd.Parameters.AddWithValue("@Description", param.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FREREntertainPost(mFREREntertainEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FREREntertainSetVoid(mFREREntertainEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertain_SetVoid", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", param.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string GetAttachmentRootPath(string db, int tipe)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_RootPath";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@TIPE", tipe);
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 8000);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }

                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"tipe: {tipe}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;
        }

        public string AttachmentSave(mAttachment param, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_AttachmentSave";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@AttachmentId", param.AttachmentId0);
                        cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber);
                        cmd.Parameters.AddWithValue("@FRERType", param.FRERType);
                        cmd.Parameters.AddWithValue("@FilePath", param.filelocation);
                        cmd.Parameters.AddWithValue("@FileName", param.fileName);
                        cmd.Parameters.AddWithValue("@ContentType", param.contentType);
                        cmd.Parameters.AddWithValue("@AttachmentUser", user);
                        cmd.Parameters.AddWithValue("@Tipe", param.extention);
                        cmd.Parameters.AddWithValue("@Ord", param.Ord);
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable GetAttachment(string trx, string db, int FRERType)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_Attachment_List", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@FRERType", FRERType);
                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string AttachmentDelete(mAttachment model, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_Attachment_Delete";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@AttachmentId", model.AttachmentId0);
                        cmd.Parameters.AddWithValue("@FRERType", model.FRERType);
                        cmd.Parameters.AddWithValue("@AttachmentUser", model.UserID);
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);

                #endregion

                throw ex;
            }

            return retval;

        }

        public int FRER_CheckValid_AddPersonEntertain(string FRERNumber, string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_CheckValid_AddPersonEntertain";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.Parameters.Add("@valid", SqlDbType.Int);
                        cmd.Parameters["@valid"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@valid"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@valid"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        #endregion

        #region FRER Perjalanan Dinas
        public string GetTransactionPerjalananDinas(string company, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRER_GetTransactionPerjalananDinas";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@company", company ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"company: {company}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable GetDataFRERPerjalanDinasHDR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERPerjalanDinasDetail(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FRERPerjalanDinasDelete(string trx, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_Delete", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }
            return retval;
        }

        public string FRERPerjalanDinasUpdate(mFRERPerjalananDinasEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", param.ApprovalStatus ?? "");
                cmd.Parameters.AddWithValue("@Description", param.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPerjalanDinasPost(mFRERPerjalananDinasEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public int FRER_Cek_User_Settlement_Perjalanan_Dinas(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Settlement_Perjalanan_Dinas";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public int FRER_Cek_Tanggal_Perjalanan_Dinas(mFRERPerjalananDinasEntry param, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_Tanggal_Perjalanan_Dinas";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@User", param.Requester ?? "");
                        cmd.Parameters.AddWithValue("@Destinantion", param.DestinationCity ?? "");
                        cmd.Parameters.AddWithValue("@STRTDATE", param.StartDate);
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string GetNewFRERPerjalananDinasNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRERPerjalananDinasNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();
                        retval = Convert.ToString(cmd.Parameters["@output"].Value);
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string FRERPerjalananDinasSaveHeader(mFRERPerjalananDinasEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                #region calculate amount. add by abdul 20230901
                if (model.Detail == null)
                    throw new Exception("Required detail information");
                if (model.Detail.Count == 0)
                    throw new Exception("Required detail information");

                if (model.Amount != null)
                {
                    decimal total = string.IsNullOrEmpty(model.Amount) ? 0 : Convert.ToDecimal(model.Amount);
                    decimal totalsubtotal = 0;
                    foreach (var i in model.Detail)
                    {
                        decimal functionalamount = string.IsNullOrEmpty(i.FunctionalAmount) ? 0 : Convert.ToDecimal(i.FunctionalAmount);
                        decimal days = string.IsNullOrEmpty(i.Days) ? 0 : Convert.ToDecimal(i.Days);
                        decimal subtotal = string.IsNullOrEmpty(i.Subtotal) ? 0 : Convert.ToDecimal(i.Subtotal);

                        if (functionalamount * days != subtotal)
                        {
                            throw new Exception("Invalid subtotal amount");
                        }

                        totalsubtotal += subtotal;
                    }
                    if (total != totalsubtotal)
                        throw new Exception("Invalid total amount");
                }
                #endregion


                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@FRERAdvance", model.FRERAdvance);
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@DueDate", model.DueDate);
                cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                cmd.Parameters.AddWithValue("@BranchDescription", model.BranchDescription ?? "");
                cmd.Parameters.AddWithValue("@DivisionDescription", model.DivisionDescription ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@NIP", model.NIP ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Requester", model.Requester ?? "");
                cmd.Parameters.AddWithValue("@GolonganUser", model.GolonganUser ?? "");
                cmd.Parameters.AddWithValue("@DestinationCity", model.DestinationCity ?? "");
                cmd.Parameters.AddWithValue("@Mission", model.Mission ?? "");
                cmd.Parameters.AddWithValue("@Sharing", model.Sharing ?? "");
                cmd.Parameters.AddWithValue("@TransportType", model.TransportType);
                cmd.Parameters.AddWithValue("@OtherTransportType", model.OtherTransportType ?? "0");
                cmd.Parameters.AddWithValue("@StartDate", model.StartDate ?? "");
                cmd.Parameters.AddWithValue("@EndDate", model.EndDate ?? "0");
                cmd.Parameters.AddWithValue("@Days", model.Days);
                cmd.Parameters.AddWithValue("@NoSuratDinas", model.NoSuratDinas ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", model.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERAmount", model.OriginalFRERAmount ?? "0");
                cmd.Parameters.AddWithValue("@TransportClass", model.TransportClass ?? "");
                cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "");
                cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod", model.PaymentMethod ?? "");
                cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                cmd.Parameters.AddWithValue("@AtasNama", model.AtasNama ?? "");
                cmd.Parameters.AddWithValue("@NoRekening", model.NoRekening ?? "");
                cmd.Parameters.AddWithValue("@PembelianTiket", model.PembelianTiket ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount ?? "0");
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.NoRekening ?? "0");
                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERPerjalananDinas_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@TravelExpenseID", i.TravelExpense);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@Days", i.Days);
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal);
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@DaysPengurang", i.Reducer ?? "");
                            cmddetail.Parameters.AddWithValue("@UserID", user ?? "");
                            cmddetail.Parameters.AddWithValue("@DestinationCity", model.DestinationCity ?? "");
                            cmddetail.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPerjalananDinasSaveDetail(mFRERPerjalananDinasEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERPerjalananDinas_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TravelExpenseID", model.TravelExpense);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@Days", model.Days);
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal);
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@DaysPengurang", model.Reducer ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FRERPerjalanDinasVoid(mFRERPerjalananDinasEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinas_SetVoid", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", param.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }
        #endregion

        #region FRER Promotion
        public DataTable GetDataFRERPromotionEntryHDR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERPromotionEntryDetail(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public int FRER_Cek_User_Settlement_Promotion(string user, string db)
        {
            int retval = 0;
            try {
            using (SqlConnection con = new SqlConnection(connstring(db)))
            {
                if (con.State != ConnectionState.Open)
                {
                    con.Open();
                }

                using (SqlCommand cmd = con.CreateCommand())
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "spAI_get_FRER_Cek_User_Settlement_Promotion";
                    cmd.CommandTimeout = 0;
                    cmd.Parameters.AddWithValue("@User", user ?? "");
                    cmd.Parameters.Add("@output", SqlDbType.Int);
                    cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();

                    if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                    {
                        retval = (Int32)cmd.Parameters["@output"].Value;
                    }

                }
            }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string GetNewFRERPromotionNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRERPromotionNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string FRERPromotionSaveHeader(mFRERPromotionEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                #region calculate amount. add by abdul 20230901
                if (model.Detail == null)
                    throw new Exception("Required detail information");
                if (model.Detail.Count == 0)
                    throw new Exception("Required detail information");

                if (model.Amount != null)
                {
                    decimal total = string.IsNullOrEmpty(model.Amount) ? 0 : Convert.ToDecimal(model.Amount);
                    decimal totalsubtotal = 0;
                    foreach (var i in model.Detail)
                    {
                        decimal OriginatingAmount = string.IsNullOrEmpty(i.OriginatingAmount) ? 0 : Convert.ToDecimal(i.OriginatingAmount);
                        decimal ppnpercent = string.IsNullOrEmpty(i.PPN_Perc) ? 0 : Convert.ToDecimal(i.PPN_Perc);
                        decimal pphpercent = string.IsNullOrEmpty(i.PPHPercentage) ? 0 : Convert.ToDecimal(i.PPHPercentage);
                        decimal subtotal = string.IsNullOrEmpty(i.Subtotal) ? 0 : Convert.ToDecimal(i.Subtotal);

                        decimal ceksubtotal = 0;
                        decimal totalppn = 0;
                        decimal totalpph = 0;
                        if (ppnpercent > 0)
                        {
                            totalppn = OriginatingAmount * ppnpercent / 100;
                        }

                        if (pphpercent > 0)
                        {
                            totalpph = OriginatingAmount * pphpercent / 100;
                        }

                        ceksubtotal = OriginatingAmount + totalppn - totalpph;

                        if (ceksubtotal != subtotal)
                        {
                            throw new Exception("Invalid subtotal amount");
                        }

                        totalsubtotal += subtotal;
                    }
                    if (total != totalsubtotal)
                        throw new Exception("Invalid total amount");
                }
                #endregion

                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@FRERAdvance", model.FRERAdvance);
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@DueDate", model.DueDate);
                cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                cmd.Parameters.AddWithValue("@BranchDescription", model.BranchDescription ?? "");
                cmd.Parameters.AddWithValue("@DivisionDescription", model.DivisionDescription ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@NIP", model.NIP ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Requester", model.Requester ?? "");
                cmd.Parameters.AddWithValue("@DealerBank", model.DealerBank ?? "");
                cmd.Parameters.AddWithValue("@DealerBankID", model.DealerBankID ?? "");
                cmd.Parameters.AddWithValue("@DealerBankName", model.DealerBankName ?? "");
                cmd.Parameters.AddWithValue("@CompanyName", model.CompanyName ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", model.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERAmount", model.OriginalFRERAmount ?? "0");
                cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "0");
                cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod", model.PaymentMethod ?? "");
                cmd.Parameters.AddWithValue("@VendorID", model.VendorID ?? "");
                cmd.Parameters.AddWithValue("@VendorName", model.VendorName ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod2", model.PaymentMethod2 ?? "");
                cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                cmd.Parameters.AddWithValue("@AtasNama", model.AtasNama ?? "");
                cmd.Parameters.AddWithValue("@NoRekening", model.NoRekening ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount ?? "0");
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                cmd.Parameters.AddWithValue("@GrossUp", model.GrossUp ?? "");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining ?? "0");

                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERPromotion_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@PromotionExpense", i.PromotionExpense);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@InvoiceOriginating", i.InvoiceOriginating ?? "0");
                            cmddetail.Parameters.AddWithValue("@InvoiceFunctional", i.InvoiceFunctional ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPromotionSaveDetail(mFRERPromotionEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }
                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERPromotion_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@PromotionExpense", model.PromotionExpense);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@InvoiceOriginating", model.InvoiceOriginating ?? "0");
                        cmd.Parameters.AddWithValue("@InvoiceFunctional", model.InvoiceFunctional ?? "0");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }
        public string FRERPromotionVoid(mFRERPromotionEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_SetVoid", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", param.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPromotionDelete(string trx, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_Delete", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPromotionUpdate(mFRERPromotionEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", param.ApprovalStatus ?? "");
                cmd.Parameters.AddWithValue("@Description", param.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPromotionPost(mFRERPromotionEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPromotion_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }
        #endregion

        #region FRER Biaya Umum
        public DataTable GetDataFRERBiayaUmumEntryHDR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERBiayaUmumEntryDetail(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public int FRER_Cek_User_Settlement_Biaya_Umum_GS(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Settlement_Promotion_Biaya_Umum_GS";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }
        
        public int BCAF_Check_Invoice_Vendor(mFRERBiayaUmumEntry param, string db)
        {
            int retval = 0;
            try {
            using (SqlConnection con = new SqlConnection(connstring(db)))
            {
                if (con.State != ConnectionState.Open)
                {
                    con.Open();
                }

                using (SqlCommand cmd = con.CreateCommand())
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "spAI_get_FRERBiayaUmumInvoiceVendorExists";
                    cmd.CommandTimeout = 0;
                    cmd.Parameters.AddWithValue("@Invoice", param.InvoiceNumber ?? "");
                    cmd.Parameters.AddWithValue("@Vendor", param.VendorID ?? "");
                    cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                    cmd.Parameters.Add("@output", SqlDbType.Int);
                    cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();

                    if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                    {
                        retval = (Int32)cmd.Parameters["@output"].Value;
                    }

                }
            }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string GetNewFRERBiayaUmumNumber(string db, string user)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRERBiayaUmumNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@user", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string FRERBiayaUmumSaveHeader(mFRERBiayaUmumEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@Kwitansi", model.Kwitansi);
                cmd.Parameters.AddWithValue("@FRERAdvance", model.FRERAdvance);
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@DueDate", model.DueDate);
                cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                cmd.Parameters.AddWithValue("@BranchDescription", model.BranchDescription ?? "");
                cmd.Parameters.AddWithValue("@DivisionDescription", model.DivisionDescription ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Requester", model.Requester ?? "");
                cmd.Parameters.AddWithValue("@InvoiceNumber", model.InvoiceNumber ?? "");
                cmd.Parameters.AddWithValue("@VendorID", model.VendorID ?? "");
                cmd.Parameters.AddWithValue("@VendorName", model.VendorName ?? "");
                cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", model.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERAmount", model.OriginalFRERAmount ?? "0");
                cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod", model.PaymentMethod ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod2", model.PaymentMethod2 ?? "");
                cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                cmd.Parameters.AddWithValue("@AtasNama", model.AtasNama ?? "");
                cmd.Parameters.AddWithValue("@NoRekening", model.NoRekening ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount ?? "0");
                cmd.Parameters.AddWithValue("@NIP", model.NIP ?? "");
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                cmd.Parameters.AddWithValue("@GrossUp", model.GrossUp ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining ?? "0");
                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;


                            SqlCommand cmddetail = new SqlCommand("spAI_FRERBiayaUmum_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@TransactionID", i.TransactionID);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@CategoryTrxID", i.CategoryTrxID ?? "");
                            cmddetail.Parameters.AddWithValue("@InvoiceOriginating", i.InvoiceOriginating ?? "0");
                            cmddetail.Parameters.AddWithValue("@InvoiceFunctional", i.InvoiceFunctional ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }
            return retval;
        }

        public string FRERBiayaUmumSaveDetail(mFRERBiayaUmumEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERBiayaUmum_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@CategoryTrxID", model.CategoryTrxID ?? "");
                        cmd.Parameters.AddWithValue("@InvoiceOriginating", model.InvoiceOriginating ?? "0");
                        cmd.Parameters.AddWithValue("@InvoiceFunctional", model.InvoiceFunctional ?? "0");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FRERBiayaUmumVoid(mFRERBiayaUmumEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_SetVoid", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", param.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.ExecuteNonQuery();

                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }
            return retval;

        }

        public string FRERBiayaUmumDelete(string trx, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_Delete", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }
            return retval;
        }

        public string FRERBiayaUmumUpdate(mFRERBiayaUmumEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", param.ApprovalStatus ?? "");
                cmd.Parameters.AddWithValue("@Description", param.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERBiayaUmumPost(mFRERBiayaUmumEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmum_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public int BCAF_Check_Category_Tranasction_Valid(string ctrxID, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERCheckCategoryTransactionValid";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@categoryTransaction", ctrxID ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"ctrxID: {ctrxID}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public int BCAF_Check_TranasctionID_Valid(string ctrxID, string trxID, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERCheckTransactionIDValid";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@categoryTransaction", ctrxID ?? "");
                        cmd.Parameters.AddWithValue("@TransactionID", trxID ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"ctrxID: {ctrxID}, trxID: {trxID}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public DataTable BCAF_Get_Description_Transaction(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERGetDescriptionTransaction", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TransactionID", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable BCAF_Get_PPH_Information(string ctrxID, string trxID, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERGetPPHInformation", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@TransactionID", ctrxID ?? "");
                cmd.Parameters.AddWithValue("@VendorID", trxID ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"ctrxID: {ctrxID}, trxID: {trxID}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        #endregion

        #region FRER Biaya Umum Finance
        public DataTable GetDataFRERBiayaUmumFinanceEntryHDR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERBiayaUmumFinanceEntryDetail(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        
        public int FRER_Cek_User_Settlement_Biaya_Umum_Finance(string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRER_Cek_User_Settlement_Biaya_Umum_Finance";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@User", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.Int);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@output"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@output"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string GetNewFRERBiayaUmumFinanceNumber(string db, string user)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRERBiayaUmumFinanceNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@user", user ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string FRERBiayaUmumFinanceSaveHeader(mFRERBiayaUmumEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@Kwitansi", model.Kwitansi);
                cmd.Parameters.AddWithValue("@FRERAdvance", model.FRERAdvance);
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@DueDate", model.DueDate);
                cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                cmd.Parameters.AddWithValue("@BranchDescription", model.BranchDescription ?? "");
                cmd.Parameters.AddWithValue("@DivisionDescription", model.DivisionDescription ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Requester", model.Requester ?? "");
                cmd.Parameters.AddWithValue("@InvoiceNumber", model.InvoiceNumber ?? "");
                cmd.Parameters.AddWithValue("@VendorID", model.VendorID ?? "");
                cmd.Parameters.AddWithValue("@VendorName", model.VendorName ?? "");
                cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", model.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERAmount", model.OriginalFRERAmount ?? "0");
                cmd.Parameters.AddWithValue("@GSRNumber", model.GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod", model.PaymentMethod ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod2", model.PaymentMethod2 ?? "");
                cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                cmd.Parameters.AddWithValue("@AtasNama", model.AtasNama ?? "");
                cmd.Parameters.AddWithValue("@NoRekening", model.NoRekening ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount ?? "0");
                cmd.Parameters.AddWithValue("@NIP", model.NIP ?? "");
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                cmd.Parameters.AddWithValue("@GrossUp", model.GrossUp ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining ?? "0");
                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERBiayaUmumFinance_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@TransactionID", i.TransactionID);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@CategoryTrxID", i.CategoryTrxID ?? "");
                            cmddetail.Parameters.AddWithValue("@InvoiceOriginating", i.InvoiceOriginating ?? "0");
                            cmddetail.Parameters.AddWithValue("@InvoiceFunctional", i.InvoiceFunctional ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERBiayaUmumFinanceSaveDetail(mFRERBiayaUmumEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERBiayaUmumFinance_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@CategoryTrxID", model.CategoryTrxID ?? "");
                        cmd.Parameters.AddWithValue("@InvoiceOriginating", model.InvoiceOriginating ?? "0");
                        cmd.Parameters.AddWithValue("@InvoiceFunctional", model.InvoiceFunctional ?? "0");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;
        }

        public string FRERBiayaUmumFinanceSetVoid(mFRERBiayaUmumEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_SetVoid", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@OriginalFRERNumber", param.OriginalFRERNumber ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }
            return retval;

        }

        public string FRERBiayaUmumFinanceDelete(string trx, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_Delete", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }
                
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERBiayaUmumFinanceUpdate(mFRERBiayaUmumEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", param.ApprovalStatus ?? "");
                cmd.Parameters.AddWithValue("@Description", param.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERBiayaUmumFinancePost(mFRERBiayaUmumEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinance_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }
        #endregion

        #region FRER Petty Cash
        public string GetNewFRERPettycashNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRERPettycashNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 50);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);

                #endregion
                throw ex;
            }
            return retval;

        }
        
        public DataTable GetDataFRERPettycashHDR(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPettycash_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERPettycashDetail(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPettycash_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FRERPettycashSaveHeader(mFRERPettycashEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                #region calculate amount. add by abdul 20230901
                if (model.Amount != null)
                {
                    decimal total = string.IsNullOrEmpty(model.Amount) ? 0 : Convert.ToDecimal(model.Amount);
                    decimal totalsubtotal = 0;
                    if (model.Detail == null)
                        throw new Exception("Required detail information");
                    if (model.Detail.Count == 0)
                        throw new Exception("Required detail information");

                    foreach (var i in model.Detail)
                    {
                        decimal OriginatingAmount = string.IsNullOrEmpty(i.OriginatingAmount) ? 0 : Convert.ToDecimal(i.OriginatingAmount);
                        decimal ppnpercent = string.IsNullOrEmpty(i.PPN_Perc) ? 0 : Convert.ToDecimal(i.PPN_Perc);
                        decimal pphpercent = string.IsNullOrEmpty(i.PPHPercentage) ? 0 : Convert.ToDecimal(i.PPHPercentage);
                        decimal subtotal = string.IsNullOrEmpty(i.Subtotal) ? 0 : Convert.ToDecimal(i.Subtotal);

                        decimal ceksubtotal = 0;
                        decimal totalppn = 0;
                        decimal totalpph = 0;
                        if (ppnpercent > 0)
                        {
                            totalppn = OriginatingAmount * ppnpercent / 100;
                        }

                        if (pphpercent > 0)
                        {
                            totalpph = OriginatingAmount * pphpercent / 100;
                        }

                        ceksubtotal = OriginatingAmount + totalppn - totalpph;

                        if (ceksubtotal != subtotal)
                        {
                            throw new Exception("Invalid subtotal amount");
                        }

                        totalsubtotal += subtotal;
                    }
                    if (total != totalsubtotal)
                        throw new Exception("Invalid total amount");
                }
                #endregion

                SqlCommand cmd = new SqlCommand("spAI_FRERPettycash_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                cmd.Parameters.AddWithValue("@DueDate", model.DueDate);
                cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                cmd.Parameters.AddWithValue("@BranchDescription", model.BranchDescription ?? "");
                cmd.Parameters.AddWithValue("@DivisionDescription", model.DivisionDescription ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", model.ApprovalStatus);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Requester", model.Requester ?? "");
                cmd.Parameters.AddWithValue("@NIP", model.NIP ?? "");
                cmd.Parameters.AddWithValue("@CurrencyID", model.CurrencyID ?? "");
                cmd.Parameters.AddWithValue("@PaymentMethod", model.PaymentMethod ?? "0");
                cmd.Parameters.AddWithValue("@AtasNama", model.AtasNama ?? "");
                cmd.Parameters.AddWithValue("@NoRekening", model.NoRekening ?? "");
                cmd.Parameters.AddWithValue("@BankID", model.BankID ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount ?? "0");
                cmd.Parameters.AddWithValue("@AmountBefore", model.AmountBefore ?? "0");
                cmd.Parameters.AddWithValue("@AmountAfter", model.AmountAfter ?? "0");
                cmd.Parameters.AddWithValue("@Description", model.Description ?? "");
                cmd.Parameters.AddWithValue("@Note", model.Note ?? "");
                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERPettycash_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@TransactionID", i.TransactionID);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPettycashSaveDetail(mFRERPettycashEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERPettycash_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FRERPettycashDelete(string trx, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPettycash_Delete", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPettycashUpdate(mFRERPettycashEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPettycash_Update", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@ApprovalStatus", param.ApprovalStatus ?? "");
                cmd.Parameters.AddWithValue("@Description", param.Description ?? "");
                cmd.Parameters.AddWithValue("@MdfUserID", user ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPettycashPost(mFRERPettycashEntry param, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPettycash_Post", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", param.FRERNumber ?? "");

                cmd.ExecuteNonQuery();
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }
        #endregion

        #region REPORT
        public DataTable ReportStokGudang(string db, string FromLocCode, string ToLocCode, int AllOrNot, string sortBy)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("BCAF_LAPORAN_STOCK_GUDANG", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@From_LocCode", FromLocCode ?? "");
                cmd.Parameters.AddWithValue("@To_LocCode", ToLocCode ?? "");
                cmd.Parameters.AddWithValue("@All_OR_NOT", AllOrNot);
                cmd.Parameters.AddWithValue("@ORDERBY", sortBy ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"fromloccode: {FromLocCode}, toloccode: {ToLocCode}, allornot: {AllOrNot}, sorby: {sortBy}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable ReportMutasiStokGudang(string db, string FromDocDate, string ToDocDate, string FromLocCode, string ToLocCode, int AllOrNot)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("BCAF_LAPORAN_MUTASI_STOCK", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FromDOCDATE", FromDocDate);
                cmd.Parameters.AddWithValue("@ToDOCDATE", ToDocDate);
                cmd.Parameters.AddWithValue("@FROM_LOCCODE", FromLocCode ?? "");
                cmd.Parameters.AddWithValue("@TO_LOCCODE", ToLocCode ?? "");
                cmd.Parameters.AddWithValue("@All_OR_NOT", AllOrNot);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FromDocDate: {FromDocDate}, ToDocDate: {ToDocDate}, FromLocCode: {FromLocCode}, ToLocCode: {ToLocCode}, AllOrNot: {AllOrNot}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable ReportStatusDokumenPrioritas(string db, string FromDocDate, string ToDocDate, string reqfrom, string regto, string gsrfrom,
            string gsrto, string status, string OrderBy)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("BCAF_STATUS_DOKUMEN_GSR", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FromDOCDATE", FromDocDate);
                cmd.Parameters.AddWithValue("@ToDOCDATE", ToDocDate);
                cmd.Parameters.AddWithValue("@FromCreator", reqfrom ?? "");
                cmd.Parameters.AddWithValue("@ToCreator", regto ?? "");
                cmd.Parameters.AddWithValue("@FromGSR", gsrfrom ?? "");
                cmd.Parameters.AddWithValue("@ToGSR", gsrto ?? "");
                cmd.Parameters.AddWithValue("@STATUS", status);
                cmd.Parameters.AddWithValue("@ORDERBY", OrderBy);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FromDocDate: {FromDocDate}, ToDocDate: {ToDocDate}, reqfrom: {reqfrom}, regto: {regto}, gsrfrom: {gsrfrom}, gsrto: {gsrto}, status: {status}, OrderBy: {OrderBy}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable ReportOutstandingAdvPrioritas(string db, string frertype, string cfrom, string cto, string OrderBy)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("BCAF_ER_LAPORAN_OUTSTANDING_FRER_ADVANCE", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FrerTypeInteger", frertype);
                cmd.Parameters.AddWithValue("@Cabang_From", cfrom ?? "");
                cmd.Parameters.AddWithValue("@Cabang_To", cto ?? "");
                cmd.Parameters.AddWithValue("@SortBy", OrderBy);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"frertype: {frertype}, cfrom: {cfrom}, cto: {cto}, OrderBy: {OrderBy}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable ReportStatusFRERPrioritas(string db, string reqfrom, string regto, string frertype, string frerfrom,
            string frerto, int FRERAdvanceInteger, string status, string OrderBy)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("BCAF_ER_PERMOHONAN_BIAYA_REPORT", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Requester_From", reqfrom ?? "");
                cmd.Parameters.AddWithValue("@Requester_To", regto ?? "");
                cmd.Parameters.AddWithValue("@FrerTypeInteger", frertype);
                cmd.Parameters.AddWithValue("@FRER_Number_From", frerfrom ?? "");
                cmd.Parameters.AddWithValue("@FRER_Number_To", frerto ?? "");
                cmd.Parameters.AddWithValue("@FRERAdvanceInteger", FRERAdvanceInteger);
                cmd.Parameters.AddWithValue("@FRERStatusInteger", status);
                cmd.Parameters.AddWithValue("@SortBy", OrderBy);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"reqfrom: {reqfrom}, frertype: {frertype}, frerfrom: {frerfrom}, frerto: {frerto}, FRERAdvanceInteger: {FRERAdvanceInteger}, status: {status}, orderby: {OrderBy}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GSRReport(string db, string GSRNumber, string user, string date)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_PrintPermohonanBarangJasaWeb", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@GSR_NUMBER", GSRNumber ?? "");
                cmd.Parameters.AddWithValue("@USER_ID", user ?? "");
                cmd.Parameters.AddWithValue("@TANGGAL_CREATE", date);

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"GSRNumber: {GSRNumber}, date: {date}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable FREREntertainReport(string db, string FRERNumber)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ReportEntertainWeb", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable FRERPerjalananDinasReport(string db, string FRERNumber)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ReportPerjalananDinasWeb", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable FRERPromotionReport(string db, string FRERNumber)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ReportPromotionWeb", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable FRERBiayaUmumReport(string db, string FRERNumber)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ReportBiayaUmumWeb", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable FRERBiayaUmumFinanceReport(string db, string FRERNumber)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_ReportBiayaUmumFinanceWeb", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        #endregion REPORT REPORT

        #region FRER Settlement
        public DataTable GetDataFRERSettlementDetail(LookupParam param, string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERSettlement_RetrieveFundTransactionDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@mode", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@param1", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@param2", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@TypeEntertainment", param.param4 ?? "");
                cmd.Parameters.AddWithValue("@TypePerjalananDinas", param.param5 ?? "");
                cmd.Parameters.AddWithValue("@TypePromotion", param.param6 ?? "");
                cmd.Parameters.AddWithValue("@TypeBiayaUmum", param.param7 ?? "");
                cmd.Parameters.AddWithValue("@TypeBiayaUmumFinance", param.param8 ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERBiayaUmumEntrySett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumRealization_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataBiayaUmumDetailSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumRealization_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FRERBiayaUmumRealizationSaveHeader(mFRERBiayaUmumEntrySettlement model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumRealization_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber1 ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount1);
                cmd.Parameters.AddWithValue("@AmountReal", model.AmountReal1 ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining1 ?? "0");
                cmd.Parameters.AddWithValue("@TransferDate", model.TransferDate1);
                cmd.Parameters.AddWithValue("@CashToFinance", model.CashToFinance1 ?? "0");
                cmd.Parameters.AddWithValue("@GrossUp", model.GrossUp1 ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERBiayaUmumRealization_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber1 ?? "");
                            cmddetail.Parameters.AddWithValue("@TransactionID", i.TransactionID);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@CategoryTransID", i.CategoryTrxID ?? "");
                            cmddetail.Parameters.AddWithValue("@IVCAMNT", i.InvoiceOriginating ?? "0");
                            cmddetail.Parameters.AddWithValue("@FUNCTIVCAMT", i.InvoiceFunctional ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");
                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERBiayaUmumRealizationSaveDetail(mFRERBiayaUmumEntrySettlement_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERBiayaUmumRealization_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@CategoryTransID", model.CategoryTrxID ?? "");
                        cmd.Parameters.AddWithValue("@IVCAMNT", model.InvoiceOriginating ?? "0");
                        cmd.Parameters.AddWithValue("@FUNCTIVCAMT", model.InvoiceFunctional ?? "0");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;
        }

        public string FRERSettlementDeleteTemp(string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERSettlement_DeleteTemp";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;
        }

        public string FRERSettlementInsertTemp(string db, string frer, string frertype)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERSettlement_InsertTemp";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", frer ?? "");
                        cmd.Parameters.AddWithValue("@FRERType", frertype ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"frer: {frer}, frertype: {frertype}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;
        }

        private static DataTable ListToDataTable<T>(IList<T> data)
        {
            try
            {
                DataTable table = new DataTable();

                if (typeof(T).IsValueType || typeof(T).Equals(typeof(string)))
                {
                    DataColumn dc = new DataColumn("Value", typeof(T));
                    table.Columns.Add(dc);
                    foreach (T item in data)
                    {
                        DataRow dr = table.NewRow();
                        dr[0] = item;
                        table.Rows.Add(dr);
                    }
                }
                else
                {
                    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(T));
                    foreach (PropertyDescriptor prop in properties)
                    {
                        table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                    }
                    foreach (T item in data)
                    {
                        DataRow row = table.NewRow();
                        foreach (PropertyDescriptor prop in properties)
                        {
                            try
                            {
                                row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                            }
                            catch (Exception)
                            {
                                row[prop.Name] = DBNull.Value;
                            }
                        }
                        table.Rows.Add(row);
                    }
                }
                return table;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw e;
            }
        }

        public string FRERSettlementCheck(mFRERSettlement model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            try
            {
                DataTable dtCheck = new DataTable();

                if (model.Details != null)
                {
                    var tblFiltered = (from v in model.Details.AsEnumerable()
                                       select new
                                       {
                                           BCAF_FRER_Number=v.FRERNumber
                                       }).ToList();

                    dtCheck = ListToDataTable(tblFiltered);
                }
                else
                {
                    throw new Exception("No Data");
                }
                SqlCommand cmd = new SqlCommand("spAI_CheckValidBeforeSettlementProcess", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                var paramtbl = cmd.CreateParameter();
                paramtbl.TypeName = "dbo.TBLSETTLEMENT";
                paramtbl.Value = dtCheck;
                paramtbl.ParameterName = "@TBLSETTLEMENT";
                cmd.Parameters.Add(paramtbl);

                cmd.ExecuteNonQuery();                
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }

            return retval;

        }

        public string GetNewFRERSettlementNumber(string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_get_FRERSettlementNumber";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 100);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        public string FRERSettlementSaveHeader(mFRERSettlement model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERSettlement_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.Parameters.AddWithValue("@Username", model.UserName ?? "");
                cmd.Parameters.AddWithValue("@FRERSettlementNumber", model.SettlementNumber ?? "");
                cmd.Parameters.AddWithValue("@DocDate", model.Docdate);

                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" 
                    || dtUserSetup.Rows[0]["administrator"].ToString() == "1"
                    || dtUserSetup.Rows[0]["Approver"].ToString() == "1"
                    || dtUserSetup.Rows[0]["finalApprover"].ToString() == "1")
                {
                    if (model.Details != null)
                    {
                        int no = 0;

                        foreach (var i in model.Details)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERSettlement_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@UserID", user ?? "");
                            cmddetail.Parameters.AddWithValue("@FRERSettlementNumber", model.SettlementNumber);
                            cmddetail.Parameters.AddWithValue("@FRERNumber", i.FRERNumber);
                            cmddetail.Parameters.AddWithValue("@FRERType", i.FRERType);
                            cmddetail.Parameters.AddWithValue("@DocDate", i.DocDate);
                            cmddetail.Parameters.AddWithValue("@Amount", i.FundAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@AmountReal", i.RealAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@AmountRemain", i.KurangLebihBayar ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERSettlementSaveDetail(mFRERSettlement_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERSettlement_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.Parameters.AddWithValue("@FRERSettlementNumber", model.SettlementNumber);
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber);
                        cmd.Parameters.AddWithValue("@FRERType", model.FRERType);
                        cmd.Parameters.AddWithValue("@DocDate", model.DocDate);
                        cmd.Parameters.AddWithValue("@Amount", model.FundAmount ?? "0");
                        cmd.Parameters.AddWithValue("@AmountReal", model.RealAmount ?? "0");
                        cmd.Parameters.AddWithValue("@AmountRemain", model.KurangLebihBayar ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetDataFRERBiayaUmumFEntrySett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinanceRealization_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataBiayaUmumFDetailSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinanceRealization_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FRERBiayaUmumFinanceRealizationSaveHeader(mFRERBiayaUmumEntrySettlement model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERBiayaUmumFinanceRealization_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber1 ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount1);
                cmd.Parameters.AddWithValue("@AmountReal", model.AmountReal1 ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining1 ?? "0");
                cmd.Parameters.AddWithValue("@TransferDate", model.TransferDate1);
                cmd.Parameters.AddWithValue("@CashToFinance", model.CashToFinance1 ?? "0");
                cmd.Parameters.AddWithValue("@GrossUp", model.GrossUp1 ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERBiayaUmumFinanceRealization_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber1 ?? "");
                            cmddetail.Parameters.AddWithValue("@TransactionID", i.TransactionID);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@CategoryTransID", i.CategoryTrxID ?? "");
                            cmddetail.Parameters.AddWithValue("@IVCAMNT", i.InvoiceOriginating ?? "0");
                            cmddetail.Parameters.AddWithValue("@FUNCTIVCAMT", i.InvoiceFunctional ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERBiayaUmumFinanceRealizationSaveDetail(mFRERBiayaUmumEntrySettlement_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERBiayaUmumFinanceRealization_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TransactionID", model.TransactionID);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@CategoryTransID", model.CategoryTrxID ?? "");
                        cmd.Parameters.AddWithValue("@IVCAMNT", model.InvoiceOriginating ?? "0");
                        cmd.Parameters.AddWithValue("@FUNCTIVCAMT", model.InvoiceFunctional ?? "0");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetDataPromotionSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPromotionRealization_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataPromotionDetailSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPromotionRealization_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FRERPromotionRealizationSaveHeader(mFRERBiayaUmumEntrySettlement model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPromotionRealization_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber1 ?? "");
                cmd.Parameters.AddWithValue("@Amount", model.Amount1);
                cmd.Parameters.AddWithValue("@AmountReal", model.AmountReal1 ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining1 ?? "0");
                cmd.Parameters.AddWithValue("@TransferDate", model.TransferDate1);
                cmd.Parameters.AddWithValue("@CashToFinance", model.CashToFinance1 ?? "0");
                cmd.Parameters.AddWithValue("@GrossUp", model.GrossUp1 ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERPromotionRealization_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber1 ?? "");
                            cmddetail.Parameters.AddWithValue("@PromotionExpense", i.PromotionExpense);
                            cmddetail.Parameters.AddWithValue("@BranchID", i.BranchID);
                            cmddetail.Parameters.AddWithValue("@DivisionID", i.DivisionID ?? "");
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN", i.PPN ?? "");
                            cmddetail.Parameters.AddWithValue("@PPH", i.PPH ?? "");
                            cmddetail.Parameters.AddWithValue("@PPHPercentage", i.PPHPercentage ?? "0");
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal ?? "0");
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);
                            cmddetail.Parameters.AddWithValue("@IVCAMNT", i.InvoiceOriginating ?? "0");
                            cmddetail.Parameters.AddWithValue("@FUNCTIVCAMT", i.InvoiceFunctional ?? "0");
                            cmddetail.Parameters.AddWithValue("@PPN_Perc", i.PPN_Perc ?? "0");
                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }
            return retval;

        }

        public string FRERPromotionRealizationSaveDetail(mFRERPromotionEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERPromotionRealization_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@PromotionExpense", model.PromotionExpense);
                        cmd.Parameters.AddWithValue("@BranchID", model.BranchID);
                        cmd.Parameters.AddWithValue("@DivisionID", model.DivisionID ?? "");
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@PPN", model.PPN ?? "0");
                        cmd.Parameters.AddWithValue("@PPH", model.PPH ?? "");
                        cmd.Parameters.AddWithValue("@PPHPercentage", model.PPHPercentage ?? "0");
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal ?? "0");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@IVCAMNT", model.InvoiceOriginating ?? "0");
                        cmd.Parameters.AddWithValue("@FUNCTIVCAMT", model.InvoiceFunctional ?? "0");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetDataPerjalananDinasSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinasRealization_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataPerjalananDinasDetailSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinasRealization_RetrieveDetail", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FRERPerjalananDinasRealizationSaveHeader(mFRERPerjalananDinasEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FRERPerjalananDinasRealization_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@StartDate", model.StartDate);
                cmd.Parameters.AddWithValue("@EndDate", model.EndDate);
                cmd.Parameters.AddWithValue("@Days", model.LamaPerjalananDinas);
                cmd.Parameters.AddWithValue("@TransportType", model.TransportType);
                cmd.Parameters.AddWithValue("@OtherTransportType", model.OtherTransportType);
                cmd.Parameters.AddWithValue("@TransportClass", model.TransportClass);
                cmd.Parameters.AddWithValue("@Amount", model.Amount1);
                cmd.Parameters.AddWithValue("@AmountReal", model.AmountReal1 ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining1 ?? "0");
                cmd.Parameters.AddWithValue("@TransferDate", model.TransferDate4);
                cmd.Parameters.AddWithValue("@CashToFinance", model.CashToFinance1 ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");
                cmd.ExecuteNonQuery();

                #region GetUserSetup

                DataTable dtUserSetup = new DataTable();
                SqlCommand cmdUser = new SqlCommand("spAI_FRER_UserSetup", conn, trans);
                cmdUser.CommandType = CommandType.StoredProcedure;
                cmdUser.Parameters.AddWithValue("@user", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmdUser;
                adp.Fill(dtUserSetup);

                #endregion

                if (dtUserSetup.Rows[0]["creator"].ToString() == "1" || dtUserSetup.Rows[0]["administrator"].ToString() == "1")
                {
                    if (model.Detail != null)
                    {
                        int no = 0;

                        foreach (var i in model.Detail)
                        {
                            no = no + 1;

                            SqlCommand cmddetail = new SqlCommand("spAI_FRERPerjalananDinasRealization_SaveDetail", conn, trans);
                            cmddetail.CommandType = CommandType.StoredProcedure;
                            cmddetail.CommandTimeout = 0;
                            cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                            cmddetail.Parameters.AddWithValue("@TravelExpenseID", i.TravelExpense);
                            cmddetail.Parameters.AddWithValue("@Description", i.Description);
                            cmddetail.Parameters.AddWithValue("@OriginatingAmount", i.OriginatingAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount ?? "0");
                            cmddetail.Parameters.AddWithValue("@Days", i.Days);
                            cmddetail.Parameters.AddWithValue("@Subtotal", i.Subtotal);
                            cmddetail.Parameters.AddWithValue("@LineNumber", no);

                            cmddetail.ExecuteNonQuery();
                        }
                    }
                }
                trans.Commit();

            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FRERPerjalananDinasRealizationSaveDetail(mFRERPerjalananDinasEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERPerjalananDinasRealization_SaveDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@TravelExpenseID", model.TravelExpense);
                        cmd.Parameters.AddWithValue("@Description", model.Description);
                        cmd.Parameters.AddWithValue("@OriginatingAmount", model.OriginatingAmount ?? "0");
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                        cmd.Parameters.AddWithValue("@Days", model.Days);
                        cmd.Parameters.AddWithValue("@Subtotal", model.Subtotal);
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetDataEntertainSett(string trx, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertainRealization_RetrieveHeader", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataEntertainDetailSett(string trx, string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertainRealization_RetrieveDetailExtended", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FREREntertainRealizationDeleteTempDetail(string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertainRealization_DeleteTempDetail";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public DataTable GetDataEntertainPersonSett(mFREREntertainEntry_Person model, string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FREREntertainRealization_RetrieveDetailTemp", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@Ord", model.LineNumber);
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public string FREREntertainRealizationClearTempDetailBeforeInsert(mFREREntertainEntry_Person model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertainRealization_DeleteTempDetail_BeforeInsert";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@Ord", model.LineNumber ?? "");
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FREREntertainSavePersonSett(mFREREntertainEntry_Person model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertainRealization_SaveDetailTemp";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@Name", model.Name);
                        cmd.Parameters.AddWithValue("@Company", model.Company);
                        cmd.Parameters.AddWithValue("@Description", model.Jabatan ?? "");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@Ord", model.Ord);
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FREREntertainRealizationSaveHeaderSett(mFREREntertainEntry model, string user, string db)
        {
            string retval = string.Empty;
            this.ConnSql(db);
            trans = conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand("spAI_FREREntertainRealization_SaveHeader", conn, trans);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandTimeout = 0;
                cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmd.Parameters.AddWithValue("@EntertainTypeID", model.EntertainTypeID ?? "");
                cmd.Parameters.AddWithValue("@EntertainPlace", model.EntertainPlace ?? "");
                cmd.Parameters.AddWithValue("@EntertainDate", model.EntertainDate ?? "1900-01-01 00:00:00");
                cmd.Parameters.AddWithValue("@EntertainPerson", model.EntertainPerson ?? "");
                cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount ?? "0");
                cmd.Parameters.AddWithValue("@Amount", model.Amount ?? "0");
                cmd.Parameters.AddWithValue("@AmountReal", model.OriginalFRERAmount ?? "0");
                cmd.Parameters.AddWithValue("@AmountRemaining", model.AmountRemaining ?? "0");
                cmd.Parameters.AddWithValue("@TransferDate", model.TransferDate5 ?? "");
                cmd.Parameters.AddWithValue("@EntertainPurpose", model.EntertainPurpose ?? "");
                cmd.Parameters.AddWithValue("@CashToFinance", model.CashToFinance ?? "0");
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                cmd.ExecuteNonQuery();

                #region TEMP

                //FREREntertainClearTempExtendedBeforeInsert(db, model.FRERNumber, conn, trans);
                SqlCommand cmdtemp = new SqlCommand("spAI_FREREntertainRealization_DeleteTempExtended_BeforeInsert", conn, trans);
                cmdtemp.CommandType = CommandType.StoredProcedure;
                cmdtemp.CommandTimeout = 0;
                cmdtemp.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                cmdtemp.ExecuteNonQuery();

                #endregion

                if (model.Detail != null)
                {
                    int no = 0;

                    foreach (var i in model.Detail)
                    {
                        no = no + 1;


                        SqlCommand cmddetail = new SqlCommand("spAI_FREREntertainRealization_SaveDetail_Extended", conn, trans);
                        cmddetail.CommandType = CommandType.StoredProcedure;
                        cmddetail.CommandTimeout = 0;
                        cmddetail.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmddetail.Parameters.AddWithValue("@NoUrut", i.NoUrut);
                        cmddetail.Parameters.AddWithValue("@EntertainPlace", i.EntertainPlace);
                        cmddetail.Parameters.AddWithValue("@EntertainAlamat", i.EntertainAlamat ?? "");
                        cmddetail.Parameters.AddWithValue("@EntertainDate", i.EntertainDate);
                        cmddetail.Parameters.AddWithValue("@EntertainPerson", i.EntertainPerson);
                        cmddetail.Parameters.AddWithValue("@EntertainTypeID", i.EntertainTypeID);
                        cmddetail.Parameters.AddWithValue("@Amount", i.Amount);
                        cmddetail.Parameters.AddWithValue("@FunctionalAmount", i.FunctionalAmount);
                        cmddetail.Parameters.AddWithValue("@EntertainPurpose", i.EntertainPurpose ?? "");
                        cmddetail.Parameters.AddWithValue("@LineNumber", no);
                        cmddetail.Parameters.AddWithValue("@UserID", user ?? "");

                        cmddetail.ExecuteNonQuery();
                    }
                }

                trans.Commit();
                //if (retval == null)
                //{
                //    FREREntertainClearTempExtendedBeforeInsert(db, model.FRERNumber);
                //}
            }
            catch (Exception ex)
            {
                if (trans != null)
                {
                    retval = ex.Message.ToString();
                    trans.Rollback();
                }

                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
                if (trans != null)
                {
                    trans.Dispose();
                    trans = null;
                }
            }

            return retval;

        }

        public string FREREntertainRealizationClearTempExtendedBeforeInsert(string trx, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertainRealization_DeleteTempExtended_BeforeInsert";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", trx ?? "");
                        cmd.ExecuteNonQuery();

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"trx: {trx}",
                    db = db,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FREREntertainRealizationSaveDetailExtendedSett(mFREREntertainEntry_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FREREntertainRealization_SaveDetail_Extended";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@NoUrut", model.NoUrut);
                        cmd.Parameters.AddWithValue("@EntertainPlace", model.EntertainPlace);
                        cmd.Parameters.AddWithValue("@EntertainAlamat", model.EntertainAlamat ?? "");
                        cmd.Parameters.AddWithValue("@EntertainDate", model.EntertainDate);
                        cmd.Parameters.AddWithValue("@EntertainPerson", model.EntertainPerson);
                        cmd.Parameters.AddWithValue("@EntertainTypeID", model.EntertainTypeID);
                        cmd.Parameters.AddWithValue("@Amount", model.Amount);
                        cmd.Parameters.AddWithValue("@FunctionalAmount", model.FunctionalAmount);
                        cmd.Parameters.AddWithValue("@EntertainPurpose", model.EntertainPurpose ?? "");
                        cmd.Parameters.AddWithValue("@LineNumber", model.LineNumber);
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.ExecuteNonQuery();
                        //retval = sql.ExecuteScalarCommand(cmd);

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public string FRERSettlementBeforeProcess(mFRERSettlement_Detail model, string user, string db)
        {
            string retval = string.Empty;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_FRERSettlement_isCheck_Process";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERType", model.FRERType ?? "");
                        cmd.Parameters.AddWithValue("@FRERNumber", model.FRERNumber ?? "");
                        cmd.Parameters.Add("@output", SqlDbType.VarChar, 100);
                        cmd.Parameters["@output"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        retval = Convert.ToString(cmd.Parameters["@output"].Value);
                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(model),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }

            return retval;

        }

        public int FRER_CheckValid_AddPersonEntertainSett(string FRERNumber, string user, string db)
        {
            int retval = 0;
            try
            {
                using (SqlConnection con = new SqlConnection(connstring(db)))
                {
                    if (con.State != ConnectionState.Open)
                    {
                        con.Open();
                    }

                    using (SqlCommand cmd = con.CreateCommand())
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "spAI_CheckValid_AddPersonEntertainSett";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@FRERNumber", FRERNumber ?? "");
                        cmd.Parameters.AddWithValue("@UserID", user ?? "");
                        cmd.Parameters.Add("@valid", SqlDbType.Int);
                        cmd.Parameters["@valid"].Direction = ParameterDirection.Output;
                        cmd.ExecuteNonQuery();

                        if (!string.IsNullOrEmpty(cmd.Parameters["@valid"].Value.ToString()))
                        {
                            retval = (Int32)cmd.Parameters["@valid"].Value;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = $"FRERNumber: {FRERNumber}",
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            return retval;

        }

        #endregion

        #region FRER Inquiry
        public DataTable GetDataFRERInquiryDetail(mFRERInquiry param, string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERInquiry", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@DocType", param.param9 ?? "");
                cmd.Parameters.AddWithValue("@TranAdv", param.param10 ?? "");
                cmd.Parameters.AddWithValue("@TranNon", param.param11 ?? "");
                cmd.Parameters.AddWithValue("@FilterBy", param.param1 ?? "");
                cmd.Parameters.AddWithValue("@FilterFrom", param.param2 ?? "");
                cmd.Parameters.AddWithValue("@FilterTo", param.param3 ?? "");
                cmd.Parameters.AddWithValue("@Save", param.param4 ?? "");
                cmd.Parameters.AddWithValue("@Submit", param.param5 ?? "");
                cmd.Parameters.AddWithValue("@Approve", param.param6 ?? "");
                cmd.Parameters.AddWithValue("@F_Approved", param.param7 ?? "");
                cmd.Parameters.AddWithValue("@Rejected", param.param8 ?? "");
                cmd.Parameters.AddWithValue("@userid", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    Body = JsonConvert.SerializeObject(param),
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }

        public DataTable GetDataFRERInquiryType(string user, string db)
        {
            DataTable dt = new DataTable();

            try
            {
                if (conn == null)
                    conn = new SqlConnection(connstring(db));
                if (conn.State != ConnectionState.Open)
                    conn.Open();

                SqlCommand cmd = new SqlCommand("spAI_FRERInquiry_Type", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@UserID", user ?? "");

                SqlDataAdapter adp = new SqlDataAdapter();
                adp.SelectCommand = cmd;
                adp.Fill(dt);
            }
            catch (Exception ex)
            {
                #region LOG
                string thismethod = GetActualAsyncMethodName();
                RequestLog log = new RequestLog
                {
                    url = thismethod,
                    db = db,
                    user = user,
                    msg = ex.Message
                };
                Insert_Request_Logs(log);
                #endregion

                throw ex;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                        conn.Close();

                    conn.Dispose();
                    conn = null;
                }
            }
            return dt;
        }
        #endregion
    }
}
